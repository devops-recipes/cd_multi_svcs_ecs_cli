aws_temp: &config_aws_cli
  - |
      AWS_ACCESS_KEY_ID=$(shipctl get_integration_resource_field "$CLUST_RES" "accessKey")
      AWS_SECRET_ACCESS_KEY=$(shipctl get_integration_resource_field "$CLUST_RES" "secretKey")
      ECS_CLUSTER_REGION=$(shipctl get_resource_version_key "$CLUST_RES" "region")
      ECS_CLUSTER=$(shipctl get_resource_version_key "$CLUST_RES" "sourceName")
      aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
      aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
      aws configure set region "$ECS_CLUSTER_REGION"

img_temp: &fetch_img_info
  - |
      export APP_IMG=$(shipctl get_resource_version_key "$IMG_RES" sourceName)
      export APP_IMG_TAG=$(shipctl get_resource_version_key "$IMG_RES" "versionName")

aws_td_rev: &create_ecs_td_rev
  - |
      shipctl replace templates/$SVCS_CONTEXT/service.json templates/$SVCS_CONTEXT/task.json
      REVISION=$(aws ecs register-task-definition --cli-input-json file://$REPO_PATH/templates/$SVCS_CONTEXT/task.json --output json --query taskDefinition.revision)
      echo "revision is $REVISION"

aws_rfr_svcs: &svcs_refresh
  - |
      EXISTS=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $SVCS_NAME --output json --query failures[0].reason)
      echo "service is $EXISTS"
      if [ $EXISTS == "\"MISSING\"" ]
      then
        aws ecs create-service --service-name $SVCS_NAME --cluster $ECS_CLUSTER --task-definition $FAMILY:$REVISION --desired-count $REPLICAS;
      else
        aws ecs update-service --service $SVCS_NAME --cluster $ECS_CLUSTER --task-definition $FAMILY:$REVISION;
      fi

resources:
# Templates Files repo
  - name: cd_ms_ecs_cli_repo
    type: gitRepo
    integration: "drship_github"
    versionTemplate:
      sourceName: "devops-recipes/cd_multi_svcs_ecs_cli"
      branch: master

jobs:
  - name: deploy_svcA_ecs_cli
    type: runSh
    steps:
      - IN: cd_ms_ecs_cli_repo
      - IN: node_app_img_dh # defined here https://github.com/devops-recipes/node_app/blob/master/shippable.yml
      - IN: aws_ecs_cluster # defined here https://github.com/devops-recipes/prov_aws_ecs_terraform/blob/master/shippable.yml
        switch: off
      - TASK:
          name: deploy_app
          runtime:
            options:
              env:
                - CLUST_RES: "aws_ecs_cluster"
                - IMG_RES: "node_app_img_dh"
                - APP_NAME: "app_ms_A_cli"
                - REPLICAS: 1
                - ENVIRONMENT: "test"
                - FAMILY: "app_ms_A_cli"
          script:
            - *config_aws_cli
            - aws ecs list-clusters
            - *fetch_img_info
            - |
                SVCS_NAME=$APP_NAME"_svcs"
                SVCS_CONTEXT=svcA
                REPO_PATH=$(shipctl get_resource_state "cd_ms_ecs_cli_repo")
            - pushd $REPO_PATH
            - *create_ecs_td_rev
            - *svcs_refresh
    flags:
      - aws_ecs
      - aws
      - aws_cli

  - name: deploy_svcB_ecs_cli
    type: runSh
    steps:
      - IN: cd_ms_ecs_cli_repo
      - IN: node_app_img_dh # defined here https://github.com/devops-recipes/node_app/blob/master/shippable.yml
      - IN: aws_ecs_cluster # defined here https://github.com/devops-recipes/prov_aws_ecs_terraform/blob/master/shippable.yml
        switch: off
      - TASK:
          name: deploy_app
          runtime:
            options:
              env:
                - CLUST_RES: "aws_ecs_cluster"
                - IMG_RES: "node_app_img_dh"
                - APP_NAME: "app_ms_B_cli"
                - REPLICAS: 1
                - ENVIRONMENT: "test"
                - FAMILY: "app_ms_B_cli"
          script:
            - *config_aws_cli
            - aws ecs list-clusters
            - *fetch_img_info
            - |
                SVCS_NAME=$APP_NAME"_svcs"
                SVCS_CONTEXT=svcB
                REPO_PATH=$(shipctl get_resource_state "cd_ms_ecs_cli_repo")
            - pushd $REPO_PATH
            - *create_ecs_td_rev
            - *svcs_refresh
    flags:
      - aws_ecs
      - aws
      - aws_cli